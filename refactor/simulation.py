import numpy as np
import matplotlib.pyplot as plt

from zflux import zflux

def gaussf(x, a, s, x0):
    y = 0
    for n in range(1,30):
        y += a*np.exp(-((x-n*x0)/s)**2)
    return y

def ft_gaussf(x, a, s, z, nu, f):
    A = 22.09797605*a*s
    C = 1/(np.pi*s)
    N = np.floor(((1+z)*nu/f)+1)
    p = 2*np.pi*(N*f/(1+z) - nu)
    q = 2*np.pi*((N+1)*f/(1+z) - nu)
    y = A*np.exp(-(x / C)**2) * (np.cos(p*x) + np.cos(q*x))
    return y

# Initial Settings
a = 0.5
s = 0.5
f = 115.2712
z = 5.55
loc = f/(1+z)

# X-axis (Frequency)
x = np.array([84.2100428553, 84.2902517325846, 84.3704606098692, 84.45066948715379, 84.53087836443838, 84.61108724172298, 84.69129611900757, 84.77150499629217, 84.85171387357677, 84.93192275086136, 85.01213162814595, 85.09234050543056, 85.17254938271515, 85.25275825999974, 85.33296713728434, 85.41317601456893, 85.49338489185352, 85.57359376913813, 85.65380264642272, 85.73401152370731, 85.81422040099191, 85.8944292782765, 85.9746381555611, 86.0548470328457, 86.13505591013029, 86.21526478741488, 86.29547366469949, 86.37568254198408, 86.45589141926867, 86.53610029655327, 86.61630917383786, 86.69651805112245, 86.77672692840706, 86.85693580569165, 86.93714468297624, 87.01735356026084, 87.09756243754543, 87.17777131483003, 87.25798019211463, 87.33818906939922, 87.41839794668381, 87.49860682396842, 87.578815701253, 87.6590245785376, 87.7392334558222, 87.81944233310679, 87.89965121039138, 87.97986008767599, 88.06006896496058, 88.14027784224517, 88.22048671952977, 88.30069559681436, 88.38090447409895, 88.46111335138356, 88.54132222866815, 88.62153110595274, 88.70173998323735, 88.78194886052194, 88.86215773780653, 88.94236661509113, 89.02257549237572, 89.10278436966031, 89.18299324694492, 89.26320212422951, 89.3434110015141, 89.4236198787987, 89.5038287560833, 89.58403763336788, 89.66424651065249, 89.74445538793708, 89.82466426522167, 89.90487314250628, 89.98508201979087, 90.06529089707546, 90.14549977436006, 90.22570865164465, 90.30591752892924, 90.38612640621385, 90.46633528349844, 90.54654416078303, 90.62675303806763, 90.70696191535222, 90.78717079263681, 90.86737966992142, 90.94758854720601, 91.0277974244906, 91.1080063017752, 91.1882151790598, 91.26842405634439, 91.34863293362899, 91.42884181091358, 91.50905068819817, 91.58925956548278, 91.66946844276737, 91.74967732005196, 91.82988619733656, 91.91009507462115, 91.99030395190574, 92.07051282919035, 92.15072170647494, 92.23093058375953, 92.31113946104412, 92.39134833832873, 92.47155721561332, 92.5517660928979, 92.63197497018251, 92.7121838474671, 92.79239272475169, 92.8726016020363, 92.95281047932089, 93.03301935660548, 93.11322823389008, 93.19343711117467, 93.27364598845926, 93.35385486574387, 93.43406374302846, 93.51427262031305, 93.59448149759766, 93.67469037488225, 93.75489925216684, 93.83510812945144, 93.91531700673603, 93.99552588402062, 94.07573476130523, 94.15594363858982, 94.23615251587441, 94.31636139315901, 94.3965702704436, 94.4767791477282, 94.5569880250128, 94.63719690229739, 94.71740577958198, 94.79761465686659, 94.87782353415118, 94.95803241143577, 95.03824128872037, 95.11845016600496, 95.19865904328955, 95.27886792057416, 95.35907679785875, 95.43928567514334, 95.51949455242794, 95.59970342971253, 95.67991230699712, 95.76012118428173, 95.84033006156632, 95.92053893885091, 96.00074781613552, 96.0809566934201, 96.1611655707047, 96.2413744479893, 96.32158332527389, 96.40179220255848, 96.48200107984309, 96.56220995712768, 96.64241883441227, 96.72262771169687, 96.80283658898146, 96.88304546626605, 96.96325434355066, 97.04346322083525, 97.12367209811984, 97.20388097540445, 97.28408985268904, 97.36429872997363, 97.44450760725823, 97.52471648454282, 97.60492536182741, 97.68513423911202, 97.76534311639661, 97.8455519936812, 97.9257608709658, 98.0059697482504, 98.08617862553498, 98.16638750281959, 98.24659638010418, 98.32680525738877, 98.40701413467337, 98.48722301195797, 98.56743188924256, 98.64764076652716, 98.72784964381175, 98.80805852109634, 98.88826739838095, 98.96847627566554, 99.04868515295013, 99.12889403023473, 99.20910290751932, 99.28931178480391, 99.36952066208852, 99.44972953937311, 99.5299384166577, 99.6101472939423, 99.6903561712269, 99.77056504851149, 99.85077392579609, 99.93098280308068, 100.01119168036527, 100.09140055764988, 100.17160943493447, 100.25181831221906, 100.33202718950366, 100.41223606678825, 100.49244494407284, 100.57265382135745, 100.65286269864204, 100.73307157592663, 100.81328045321123, 100.89348933049583, 100.97369820778042, 101.05390708506502, 101.13411596234961, 101.2143248396342, 101.2945337169188, 101.3747425942034, 101.45495147148799, 101.53516034877259, 101.61536922605718, 101.69557810334177, 101.77578698062638, 101.85599585791097, 101.93620473519556, 102.01641361248016, 102.09662248976475, 102.17683136704935, 102.25704024433395, 102.33724912161854, 102.41745799890313, 102.49766687618774, 102.57787575347233, 102.65808463075692, 102.73829350804152, 102.81850238532611, 102.8987112626107, 102.97892013989531, 103.0591290171799, 103.13933789446449, 103.2195467717491, 103.29975564903368, 103.37996452631828, 103.46017340360288, 103.54038228088747, 103.62059115817206, 103.70080003545667, 103.78100891274126, 103.86121779002585, 103.94142666731045, 104.02163554459504, 104.10184442187963, 104.18205329916424, 104.26226217644883, 104.34247105373342, 104.42267993101802, 104.50288880830261, 104.5830976855872, 104.66330656287181, 104.7435154401564, 104.82372431744099, 104.9039331947256, 104.98414207201019, 105.06435094929478, 105.14455982657938, 105.22476870386397, 105.30497758114856, 105.38518645843317, 105.46539533571776, 105.54560421300235, 105.62581309028695, 105.70602196757154, 105.78623084485614, 105.86643972214074, 105.94664859942533, 106.02685747670992, 106.10706635399453, 106.18727523127912, 106.2674841085637, 106.34769298584831, 106.4279018631329, 106.5081107404175, 106.5883196177021, 106.66852849498669, 106.74873737227128, 106.82894624955588, 106.90915512684047, 106.98936400412506, 107.06957288140967, 107.14978175869426, 107.22999063597885, 107.31019951326346, 107.39040839054805, 107.47061726783264, 107.55082614511724, 107.63103502240183, 107.71124389968642, 107.79145277697103, 107.87166165425562, 107.95187053154021, 108.03207940882481, 108.1122882861094, 108.192497163394, 108.2727060406786, 108.35291491796319, 108.43312379524778, 108.51333267253239, 108.59354154981698, 108.67375042710157, 108.75395930438617, 108.83416818167076, 108.91437705895535, 108.99458593623996, 109.07479481352455, 109.15500369080914, 109.23521256809374, 109.31542144537833, 109.39563032266292, 109.47583919994753, 109.55604807723212, 109.63625695451671, 109.71646583180132, 109.7966747090859, 109.8768835863705, 109.9570924636551, 110.03730134093969, 110.11751021822428, 110.19771909550889, 110.27792797279348, 110.35813685007807, 110.43834572736267, 110.51855460464726, 110.59876348193185, 110.67897235921646, 110.75918123650105, 110.83939011378564, 110.91959899107025, 110.99980786835484, 111.08001674563943, 111.16022562292403, 111.24043450020862, 111.32064337749321, 111.40085225477782, 111.48106113206241, 111.561270009347, 111.6414788866316, 111.7216877639162, 111.80189664120078, 111.88210551848539, 111.96231439576998, 112.04252327305457, 112.12273215033917, 112.20294102762377, 112.28314990490836, 112.36335878219296, 112.44356765947755, 112.52377653676214, 112.60398541404675, 112.68419429133134, 112.76440316861593, 112.84461204590053, 112.92482092318512, 113.00502980046971, 113.08523867775432, 113.16544755503891, 113.2456564323235, 113.3258653096081, 113.4060741868927, 113.48628306417729, 113.56649194146189, 113.64670081874648, 113.72690969603107, 113.80711857331568, 113.88732745060027, 113.96753632788486, 114.04774520516946, 114.12795408245405, 114.20816295973864, 114.28837183702325, 114.36858071430784, 114.44878959159243, 114.52899846887703, 114.60920734616163, 114.68941622344622, 114.76962510073082, 114.84983397801541, 114.9300428553])
x0 = x[0]

# Y-axis (Flux)
noise = np.random.normal(loc=0, scale=0.0, size=len(x))
y = gaussf(x, a, s, loc) + noise

# # Double Gaussian Plot
# plt.plot(x, y)
# plt.show()

# Chi-squared plot
sim = zflux(f, x, y)
z, chi2 = sim.zfind(0, 0.01, 10)
min_z = z[np.argmin(chi2)]
min_chi2 = min(chi2)
plt.plot(z, chi2, color='black')
plt.plot(min_z, min_chi2, 'bo')
plt.title(f'z={round(z,2)} @ $\chi^2_r$={round(min_chi2,2)}')
plt.ylabel('$\chi^2_r$')
plt.xlabel('Redshift')
plt.show()

N = 5*len(y) # Number of sample points
T = x[1]-x[0] # sample spacing

# Fourier transformed data
fy = np.fft.rfft(y, N).real
fx = np.fft.rfftfreq(N, T)

# Fourier Transform Plot
plt.plot(fx, fy)
plt.plot(fx, ft_gaussf(fx, a, s, z, x0, f))
plt.legend(['FFT', 'Fit'])
plt.show()